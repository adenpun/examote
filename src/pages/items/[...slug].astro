---
import Layout from "@layouts/Layout.astro";
import { mongoDB } from "@scripts/db";

const item = await mongoDB.getItem(Astro.params.slug!);

// let { html, env } = item ? await itemToHtml(item) : {};

// const title = env
//   ? env.frontmatter?.title
//     ? env.frontmatter.title
//     : "Title Not Found"
//   : "Not Found";
const title = "asd";
const isEdit = Astro.url.searchParams.get("edit") !== null;
const isSource = Astro.url.searchParams.get("source") !== null;

// console.log(JSON.stringify(env, null, 2));
if (isSource) {
  if (!item) return new Response(null, { status: 404 });
  return new Response(item.content);
}

if (isEdit && Astro.request.method === "POST") {
  if (item) {
    mongoDB.setItem(
      Astro.params.slug!,
      "content",
      (await Astro.request.text()).trim(),
    );
  } else {
    mongoDB.addItem({
      content: (await Astro.request.text()).trim(),
      id: Astro.params.slug!,
    });
  }
}
---

<Layout title={title}>
  <div id="editor"></div>
</Layout>

<script>
  import { markdown } from "@codemirror/lang-markdown";
  import { syntaxTree } from "@codemirror/language";
  import { EditorState, RangeSet, RangeSetBuilder } from "@codemirror/state";
  import {
    Decoration,
    EditorView,
    ViewPlugin,
    ViewUpdate,
    WidgetType,
    type DecorationSet,
  } from "@codemirror/view";
  import { minimalSetup } from "codemirror";

  class HeaderWidget extends WidgetType {
    constructor() {
      super();
    }

    toDOM(view: EditorView): HTMLElement {
      const h1 = document.createElement("h1");
      h1.textContent = "asd";
      return h1;
    }
  }
  function header(view: EditorView): RangeSet<Decoration> {
    const builder = new RangeSetBuilder<Decoration>();
    syntaxTree(view.state).iterate({
      enter: (node) => {
        if (node.name !== "ATXHeading1") return;
        builder.add(
          node.from,
          node.to,
          Decoration.replace({
            widget: new HeaderWidget(),
          }),
        );
      },
    });
    return builder.finish();
  }

  const emMarkdown = ViewPlugin.fromClass(
    class {
      decorations: DecorationSet;

      constructor(view: EditorView) {
        this.decorations = header(view);
      }

      update(update: ViewUpdate) {
        if (update.docChanged) {
          this.decorations = header(update.view);
          console.log(this.decorations);
        }
      }
    },
  );

  const state = EditorState.create({
    doc: "hello world",
    extensions: [minimalSetup, markdown(), emMarkdown],
  });

  new EditorView({
    state: state,
    parent: document.getElementById("editor")!,
  });
</script>
